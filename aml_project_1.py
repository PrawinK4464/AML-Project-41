# -*- coding: utf-8 -*-
"""AML project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1slPhE_YVfv7BGCm98kdG4g9w10VjgVc0
"""

!pip install nltk

!pip install --user -U nltk

import nltk
nltk.download()

data = pd.read_csv("Twitter_Data.csv")
data.head()

import pandas as pd

# Load the dataset
data = pd.read_csv("Twitter_Data.csv")

# Calculate percentages
total_tweets = len(data)
positive_percentage = (len(data[data['category'] == 1]) / total_tweets) * 100
negative_percentage = (len(data[data['category'] == -1]) / total_tweets) * 100
neutral_percentage = (len(data[data['category'] == 0]) / total_tweets) * 100

# Print the results
print("Positive tweets percentage: {:.2f} %".format(positive_percentage))
print("Negative tweets percentage: {:.2f} %".format(negative_percentage))
print("Neutral tweets percentage: {:.2f} %".format(neutral_percentage))

import pandas as pd
import re
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

# Load the dataset
data = pd.read_csv("Twitter_Data.csv")

# Remove rows with missing values in 'clean_text' column
data.dropna(subset=['clean_text'], inplace=True)

# Preprocess the data
def clean_text_1(text):
    text = re.sub(r'\W', ' ', text)  # Remove non-word characters
    text = re.sub(r'\s+', ' ', text)  # Remove extra whitespace
    text = text.lower().strip()  # Convert to lowercase and strip
    return text

data['clean_text'] = data['clean_text'].apply(clean_text_1)

# Feature Engineering
X = data['clean_text']
y = data['category']

# Splitting the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorization using TF-IDF
tfidf_vectorizer = TfidfVectorizer(max_features=10000)  # You can adjust max_features as needed
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Remove corresponding rows with missing values in y_train
missing_indices_train = np.isnan(y_train)
X_train_tfidf = X_train_tfidf[~missing_indices_train]
y_train = y_train[~missing_indices_train]

# Remove corresponding rows with missing values in y_test
missing_indices_test = np.isnan(y_test)
X_test_tfidf = X_test_tfidf[~missing_indices_test]
y_test = y_test[~missing_indices_test]

# Model Building
model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, y_train)

# Model Evaluation
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Model Prediction
sample_tweet = "This is a great movie! I loved it."
sample_tweet_tfidf = tfidf_vectorizer.transform([sample_tweet])
predicted_sentiment = model.predict(sample_tweet_tfidf)[0]
print("Predicted sentiment for sample tweet:", predicted_sentiment)

# Calculate percentages
total_tweets = len(data)
positive_percentage = (len(data[data['category'] == 1]) / total_tweets) * 100
negative_percentage = (len(data[data['category'] == -1]) / total_tweets) * 100
neutral_percentage = (len(data[data['category'] == 0]) / total_tweets) * 100

# Print the results
print("Positive tweets percentage: {:.2f} %".format(positive_percentage))
print("Negative tweets percentage: {:.2f} %".format(negative_percentage))
print("Neutral tweets percentage: {:.2f} %".format(neutral_percentage))

# Visualize the distribution of sentiment categories
sentiment_counts = data['category'].value_counts()
labels = ['Negative', 'Neutral', 'Positive']
colors = ['red', 'black', 'green']
plt.figure(figsize=(8, 6))
plt.pie(sentiment_counts, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Sentiment Categories')
plt.axis('equal')
plt.show()

# Plot bar chart
plt.figure(figsize=(8, 6))
plt.bar(labels, sentiment_counts, color=colors)
plt.title('Sentiment Category Counts')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()